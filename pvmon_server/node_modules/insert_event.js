


var rs = require('rolling_state.js');
var statsd = require('statsd.js');

// we always send an event to rolling state


module.exports.process = function(req,res,body) {
			
	// FIXME: add some more type checks
	var events;
	try {
		events = JSON.parse(body);
	}
	catch(e) {
		// didn't manage to decode
		res.writeHead(500, {'Content-Type':'text/plain'});
		res.write("ERR: JSON decode error: "+e);
		res.end();
		return;
	};

	try {

		// check that it is a list
		if(!Array.isArray(events)) { throw('correct JSON format is one info per array'); }


		var current_timestamp = Math.round(new Date().getTime() / 1000);

		events.forEach(function(ev) {

			// I will only accept 'hashtables' that contain a bunch of strings / numbers
			if(typeof(ev) != 'object' || ev == null || Array.isArray(ev)) { throw('correct JSON format is one hash per array'); }

			for (var i in ev) {
				if(ev.hasOwnProperty(i)) {
					if(typeof(ev[i]) != 'string' && typeof(ev[i]) != 'number') {
						throw('correct JSON format simple key/value');
					}
				} else {
					throw('something went really wrong here');
				}
			}

			// mandatory properties
			// so basically we need host, service, time, state and/or metric
			Array('host','service','time').forEach(function(prop) {
				if(!ev.hasOwnProperty(prop)) { throw('missing property '+prop); }
				if(!ev[prop]) { throw('empty property '+prop); }
			});

			// if we have a metric, we need a metric type - it defaults to counter
			if(ev.hasOwnProperty('metric')) {
				if(ev.hasOwnProperty('metric_type')) {

					// valid types are documented in statsd
					// https://github.com/b/statsd_spec+

					// we can use:
					// gauge
					// ms - timer / timing
					// actually just use gauge everywhere. and if you don't want to, then just directly send the stuff to statsd...


					var metric_convert = {
						'g':'gauge', 'gauge':'gauge',
						'ms':'timing', 'timer':'timing',
					};


					if(metric_convert.hasOwnProperty(ev.metric_type)) {
						ev.metric_type = metric_convert[ev.metric_type];
					} else {
						throw('wrong metric_type \''+ev.metric_type+'\'');
					}
				} else {
					ev.metric_type = 'gauge'; // default to gauge
				}
			}
			else {
				if(!ev.hasOwnProperty('state')) {
					// we have no metric AND no state? we're missing something...
					throw('missing property: we need metric and/or state to handle this');
				}
			}

			ev.receive_time = current_timestamp;


			// ok so now let's push this
			// --------------------------------------------------------
			if(ev.hasOwnProperty('state')) {
				// I push it to rolling_state
				rs.insert_event(ev);

			}

			if(ev.hasOwnProperty('metric')) {
				// I push it to statsd
				statsd.insert_event(ev);
			}

		});
	}
	catch(e) {
		// didn't manage to decode
		console.log('rejecting input because '+e);
		if(typeof(e) === 'object') { console.log(e.stack); }
		res.writeHead(500, {'Content-Type':'text/plain'});
		res.write('ERR: '+e);
		res.end();
		return;
	};

	res.writeHead(200, {'Content-Type':'text/plain'});
	res.write("OK\n");
	res.end();
};

