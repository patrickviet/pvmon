


var rs = require('rolling_state.js');

// we always send an event to rolling state
var streams = {
	'rolling_state': rs,
};


module.exports.process = function(req,res,body) {
			
	// FIXME: add some more type checks
	var events;
	try {
		events = JSON.parse(body);
	}
	catch(e) {
		// didn't manage to decode
		res.writeHead(500, {'Content-Type':'text/plain'});
		res.write("ERR: JSON decode error: "+e);
		res.end();
		return;
	};

	try {

		// check that it is a list
		if(!Array.isArray(events)) { throw('correct JSON format is one info per array'); }


		var current_timestamp = Math.round(new Date().getTime() / 1000);

		events.forEach(function(ev) {

			// I will only accept 'hashtables' that contain a bunch of strings / numbers
			if(typeof(ev) != 'object' || ev == null || Array.isArray(ev)) { throw('correct JSON format is one hash per array'); }

			for (var i in ev) {
				if(ev.hasOwnProperty(i)) {
					if(typeof(ev[i]) != 'string' && typeof(ev[i]) != 'number') {
						throw('correct JSON format simple key/value');
					}
				} else {
					throw('something went really wrong here');
				}
			}

			// mandatory properties
			Array('host','service','state','time').forEach(function(prop) {
				if(!ev.hasOwnProperty(prop)) { throw('missing property '+prop); }
				if(!ev[prop]) { throw('empty property '+prop); }
			});


			if(!ev.hasOwnProperty('stream')) {
				ev.stream = 'rolling_state';
			}

			ev.receive_time = current_timestamp;

			var stream_list = ev.stream.split(',');
			if(stream_list.length) {


				// a bit of split / stream processing...
				
				var stream_list_unique = {};

				stream_list.forEach(function(st) {
					if(streams.hasOwnProperty(st)) {
						// all good
						stream_list_unique[st] = 1;
					} else {
						// we have an error here!!
						// for now we just go to default...
						stream_list_unique['rolling_state'] = 1;
					}


					ev.stream = [];
					for (var key in stream_list_unique) {
						ev.stream.push(key);
					}
				});


			} else {
				ev.stream = ['rolling_state'];
			}
			
			// execute for all streams
			ev.stream.forEach(function(st) { console.log('insert event '+ev.service); streams[st].insert_event(ev); });

		});
	}
	catch(e) {
		// didn't manage to decode
		console.log('rejecting input because '+e);
		res.writeHead(500, {'Content-Type':'text/plain'});
		res.write('ERR: '+e);
		res.end();
		return;
	};

	res.writeHead(200, {'Content-Type':'text/plain'});
	res.write("OK\n");
	res.end();
};

